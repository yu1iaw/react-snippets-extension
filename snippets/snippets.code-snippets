{
    "⚛ arrow fn named export": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "asy",
        "body": [
            "export const ${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g} = () => {\r",
            "    return (\r",
            "        <>$0</>\r",
            "    )\r",
            "}"
        ],
        "description": "arrow function named export"
    },
    "⚛ arrow fn default export": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "asd",
        "body": [
            "const ${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g}$1 = () => {\r",
            "    return (\r",
            "        <></>\r",
            "    )\r",
            "}\r",
            "\r",
            "export default ${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g}$1;"
        ],
        "description": "arrow function default export"
    },
    "⚛ file related fn": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "asfr",
        "body": [
            "export default function ${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g}() {\r",
            "    return (\r",
            "        <>$0</>\r",
            "    )\r",
            "}"
        ],
        "description": "default export before a function declaration, function name relates to file name"
    },
    "⚛ folder related fn": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "aswr",
        "body": [
            "export default function ${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/${1:/capitalize}/}() {\r",
            "    return (\r",
            "        <>$0</>\r",
            "    )\r",
            "}"
        ],
        "description": "default export before a function declaration, function name relates to folder name"
    },
    "⚛ choice fn": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "asch",
        "body": [
            "export default function $2${1|Page,Layout|}() {\r",
            "    return (\r",
            "        <>$0</>\r",
            "    )\r",
            "}"
        ],
        "description": "choose function name between Page and Layout and export by default"
    },
    "⚛ useState": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "us",
        "body": "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState$2(\"\"$0);",
        "description": "useState hook: press Tab after typing the value and let magic happen"
    },
    "⚛ useRef": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "uref",
        "body": "const $1Ref = useRef$2(null$0);",
        "description": "useRef hook: press Ctrl+Space to import hook"
    },
    "⚛ useEffect": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ue",
        "body": [
            "useEffect$1(() => {\r",
            "    $0\r",
            "}, [])"
        ],
        "description": "useEffect hook: press Ctrl+Space to import hook"
    },
    "⚛ useLayoutEffect": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ule",
        "body": [
            "useLayoutEffect$1(() => {\r",
            "    $0\r",
            "}, [])"
        ],
        "description": "useLayoutEffect hook: press Ctrl+Space to import hook"
    },
    "⚛ React Context API": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "cctx",
        "body": [
            "import { createContext, useContext } from \"react\";\r",
            "\r",
            "const $1Context = createContext(null);\r",
            "\r",
            "\r",
            "export const $1ContextProvider = ({ children }) => {\r",
            "    $0\r",
            "\r",
            "    return (\r",
            "        <$1Context.Provider value={{}}>\r",
            "            {children}\r",
            "        </$1Context.Provider>\r",
            "    );\r",
            "}\r",
            "\r",
            "export const use$1 = () => {\r",
            "    const value = useContext($1Context);\r",
            "\r",
            "    if (!value) {\r",
            "        throw new Error(`use$1 must be wrapped inside $1ContextProvider`);\r",
            "    }\r",
            "\r",
            "    return value;\r",
            "}"
        ],
        "description": "React Context API"
    },
    "⚛ FlatList": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "fli",
        "body": [
            "<FlatList$1\r",
            "    data={data$2}\r",
            "    keyExtractor={item => item.id}\r",
            "    showsVerticalScrollIndicator={false}\r",
            "    renderItem={({ item }) => (\r",
            "        <RenderItem$0 />\r",
            "    )}\r",
            "/>"
        ],
        "description": "FlatList component"
    },
    "⚛ expo component": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ec",
        "body": [
            "import { View, Text } from 'react-native';\r",
            "\r",
            "\r",
            "\r",
            "export const ${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g} = () => {\r",
            "    return (\r",
            "        <View>\r",
            "            <Text>${TM_FILENAME_BASE/(^|[-_]+)([^-_]+)/${2:/capitalize}/g}$0</Text>\r",
            "        </View>\r",
            "    )\r",
            "}"
        ],
        "description": "expo/react native component named export"
    },
    "⚛ stylesheet": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ss",
        "body": [
            "const styles = StyleSheet$1.create({\r",
            "    $0\r",
            "})"
        ],
        "description": "stylesheet variable"
    },
    "⚛ stylesheet align center": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ssac",
        "body": [
            "container: {\r",
            "    flex: 1,\r",
            "    justifyContent: \"center\",\r",
            "    alignItems: \"center\",\r",
            "    gap: 16,$0\r",
            "},"
        ],
        "description": "stylesheet centered container"
    },
    "⚛ stylesheet row": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ssrw",
        "body": [
            "rowContainer: {\r",
            "    flexDirection: \"row\",\r",
            "    justifyContent: \"space-between\",\r",
            "    alignItems: \"center\",\r",
            "    margin: 16,$0\r",
            "},"
        ],
        "description": "stylesheet row container"
    },
    "⚛ export stylesheet": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ess",
        "body": [
            "import { StyleSheet } from \"react-native\";\r",
            "\r",
            "export default StyleSheet.create({\r",
            "    mainContainer: {\r",
            "        flex: 1,\r",
            "        backgroundColor: \"#fff\",$0\r",
            "    },\r",
            "})"
        ],
        "description": "expo/react native stylesheet default export"
    },
    "⚛ useLocalSearchParams": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ersea",
        "body": "const { $1 } = useLocalSearchParams$0();",
        "description": "useLocalSearchParams expo router hook: press Ctrl+Space to import hook"
    },
    "⚛ expo router stack layout": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ers",
        "body": [
            "import { Stack } from \"expo-router\";\r",
            "\r",
            "\r",
            "export default function StackLayout() {\r",
            "    return (\r",
            "        <Stack>\r",
            "            <Stack.Screen name=\"$1\" options={{ $0 }} />\r",
            "        </Stack>\r",
            "    )\r",
            "}"
        ],
        "description": "expo router stack layout"
    },
    "⚛ expo router tabs layout": {
        "scope": "javascript,typescript,javascriptreact,typescriptreact",
        "prefix": "ert",
        "body": [
            "import { Tabs } from \"expo-router\";\r",
            "\r",
            "\r",
            "export default function TabsLayout() {\r",
            "    return (\r",
            "        <Tabs\r",
            "            screenOptions={{$2}}\r",
            "        >\r",
            "            <Tabs.Screen name=\"$1\" options={{ $0 }} />\r",
            "        </Tabs>\r",
            "    )\r",
            "}"
        ],
        "description": "expo router tabs layout"
    },
}